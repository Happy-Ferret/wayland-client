// Warning. This file was generated by wayland-generator
// and should not be changed manually.
package wayland

const (
	DisplayErrorInvalidObject = 0
	DisplayErrorInvalidMethod = 1
	DisplayErrorNoMemory      = 2
)

const (
	ShmErrorInvalidFormat = 0
	ShmErrorInvalidStride = 1
	ShmErrorInvalidFd     = 2
)

const (
	ShmFormatArgb8888    = 0
	ShmFormatXrgb8888    = 1
	ShmFormatC8          = 0x20203843
	ShmFormatRgb332      = 0x38424752
	ShmFormatBgr233      = 0x38524742
	ShmFormatXrgb4444    = 0x32315258
	ShmFormatXbgr4444    = 0x32314258
	ShmFormatRgbx4444    = 0x32315852
	ShmFormatBgrx4444    = 0x32315842
	ShmFormatArgb4444    = 0x32315241
	ShmFormatAbgr4444    = 0x32314241
	ShmFormatRgba4444    = 0x32314152
	ShmFormatBgra4444    = 0x32314142
	ShmFormatXrgb1555    = 0x35315258
	ShmFormatXbgr1555    = 0x35314258
	ShmFormatRgbx5551    = 0x35315852
	ShmFormatBgrx5551    = 0x35315842
	ShmFormatArgb1555    = 0x35315241
	ShmFormatAbgr1555    = 0x35314241
	ShmFormatRgba5551    = 0x35314152
	ShmFormatBgra5551    = 0x35314142
	ShmFormatRgb565      = 0x36314752
	ShmFormatBgr565      = 0x36314742
	ShmFormatRgb888      = 0x34324752
	ShmFormatBgr888      = 0x34324742
	ShmFormatXbgr8888    = 0x34324258
	ShmFormatRgbx8888    = 0x34325852
	ShmFormatBgrx8888    = 0x34325842
	ShmFormatAbgr8888    = 0x34324241
	ShmFormatRgba8888    = 0x34324152
	ShmFormatBgra8888    = 0x34324142
	ShmFormatXrgb2101010 = 0x30335258
	ShmFormatXbgr2101010 = 0x30334258
	ShmFormatRgbx1010102 = 0x30335852
	ShmFormatBgrx1010102 = 0x30335842
	ShmFormatArgb2101010 = 0x30335241
	ShmFormatAbgr2101010 = 0x30334241
	ShmFormatRgba1010102 = 0x30334152
	ShmFormatBgra1010102 = 0x30334142
	ShmFormatYuyv        = 0x56595559
	ShmFormatYvyu        = 0x55595659
	ShmFormatUyvy        = 0x59565955
	ShmFormatVyuy        = 0x59555956
	ShmFormatAyuv        = 0x56555941
	ShmFormatNv12        = 0x3231564e
	ShmFormatNv21        = 0x3132564e
	ShmFormatNv16        = 0x3631564e
	ShmFormatNv61        = 0x3136564e
	ShmFormatYuv410      = 0x39565559
	ShmFormatYvu410      = 0x39555659
	ShmFormatYuv411      = 0x31315559
	ShmFormatYvu411      = 0x31315659
	ShmFormatYuv420      = 0x32315559
	ShmFormatYvu420      = 0x32315659
	ShmFormatYuv422      = 0x36315559
	ShmFormatYvu422      = 0x36315659
	ShmFormatYuv444      = 0x34325559
	ShmFormatYvu444      = 0x34325659
)

const (
	DataDeviceErrorRole = 0
)

const (
	ShellErrorRole = 0
)

const (
	ShellSurfaceResizeNone        = 0
	ShellSurfaceResizeTop         = 1
	ShellSurfaceResizeBottom      = 2
	ShellSurfaceResizeLeft        = 4
	ShellSurfaceResizeTopLeft     = 5
	ShellSurfaceResizeBottomLeft  = 6
	ShellSurfaceResizeRight       = 8
	ShellSurfaceResizeTopRight    = 9
	ShellSurfaceResizeBottomRight = 10
)

const (
	ShellSurfaceTransientInactive = 0x1
)

const (
	ShellSurfaceFullscreenMethodDefault = 0
	ShellSurfaceFullscreenMethodScale   = 1
	ShellSurfaceFullscreenMethodDriver  = 2
	ShellSurfaceFullscreenMethodFill    = 3
)

const (
	SurfaceErrorInvalidScale     = 0
	SurfaceErrorInvalidTransform = 1
)

const (
	SeatCapabilityPointer  = 1
	SeatCapabilityKeyboard = 2
	SeatCapabilityTouch    = 4
)

const (
	PointerErrorRole = 0
)

const (
	PointerButtonStateReleased = 0
	PointerButtonStatePressed  = 1
)

const (
	PointerAxisVerticalScroll   = 0
	PointerAxisHorizontalScroll = 1
)

const (
	KeyboardKeymapFormatNoKeymap = 0
	KeyboardKeymapFormatXkbV1    = 1
)

const (
	KeyboardKeyStateReleased = 0
	KeyboardKeyStatePressed  = 1
)

const (
	OutputSubpixelUnknown       = 0
	OutputSubpixelNone          = 1
	OutputSubpixelHorizontalRgb = 2
	OutputSubpixelHorizontalBgr = 3
	OutputSubpixelVerticalRgb   = 4
	OutputSubpixelVerticalBgr   = 5
)

const (
	OutputTransformNormal     = 0
	OutputTransform90         = 1
	OutputTransform180        = 2
	OutputTransform270        = 3
	OutputTransformFlipped    = 4
	OutputTransformFlipped90  = 5
	OutputTransformFlipped180 = 6
	OutputTransformFlipped270 = 7
)

const (
	OutputModeCurrent   = 0x1
	OutputModePreferred = 0x2
)

const (
	SubcompositorErrorBadSurface = 0
)

const (
	SubsurfaceErrorBadSurface = 0
)

type DisplayErrorEvent struct {
	ObjectId Proxy
	Code     uint32
	Message  string
}

type DisplayDeleteIdEvent struct {
	Id uint32
}

type Display struct {
	BaseProxy
	ErrorChan    chan DisplayErrorEvent
	DeleteIdChan chan DisplayDeleteIdEvent
}

func NewDisplay(c *Connection) *Display {
	ret := &Display{}
	ret.ErrorChan = make(chan DisplayErrorEvent, 0)
	ret.DeleteIdChan = make(chan DisplayDeleteIdEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Display) Sync() (*Callback, error) {
	ret := NewCallback(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret))
}

func (p *Display) GetRegistry() (*Registry, error) {
	ret := NewRegistry(p.Connection())
	return ret, p.Connection().SendRequest(p, 1, Proxy(ret))
}

type RegistryGlobalEvent struct {
	Name    uint32
	Ifc     string
	Version uint32
}

type RegistryGlobalRemoveEvent struct {
	Name uint32
}

type Registry struct {
	BaseProxy
	GlobalChan       chan RegistryGlobalEvent
	GlobalRemoveChan chan RegistryGlobalRemoveEvent
}

func NewRegistry(c *Connection) *Registry {
	ret := &Registry{}
	ret.GlobalChan = make(chan RegistryGlobalEvent, 0)
	ret.GlobalRemoveChan = make(chan RegistryGlobalRemoveEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Registry) Bind(name uint32, ifc string, version uint32, id Proxy) error {
	return p.Connection().SendRequest(p, 0, name, ifc, version, id)
}

type CallbackDoneEvent struct {
	CallbackData uint32
}

type Callback struct {
	BaseProxy
	DoneChan chan CallbackDoneEvent
}

func NewCallback(c *Connection) *Callback {
	ret := &Callback{}
	ret.DoneChan = make(chan CallbackDoneEvent, 0)
	c.Register(ret)
	return ret
}

type Compositor struct {
	BaseProxy
}

func NewCompositor(c *Connection) *Compositor {
	ret := &Compositor{}
	c.Register(ret)
	return ret
}

func (p *Compositor) CreateSurface() (*Surface, error) {
	ret := NewSurface(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret))
}

func (p *Compositor) CreateRegion() (*Region, error) {
	ret := NewRegion(p.Connection())
	return ret, p.Connection().SendRequest(p, 1, Proxy(ret))
}

type ShmPool struct {
	BaseProxy
}

func NewShmPool(c *Connection) *ShmPool {
	ret := &ShmPool{}
	c.Register(ret)
	return ret
}

func (p *ShmPool) CreateBuffer(offset int32, width int32, height int32, stride int32, format uint32) (*Buffer, error) {
	ret := NewBuffer(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret), offset, width, height, stride, format)
}

func (p *ShmPool) Destroy() error {
	return p.Connection().SendRequest(p, 1)
}

func (p *ShmPool) Resize(size int32) error {
	return p.Connection().SendRequest(p, 2, size)
}

type ShmFormatEvent struct {
	Format uint32
}

type Shm struct {
	BaseProxy
	FormatChan chan ShmFormatEvent
}

func NewShm(c *Connection) *Shm {
	ret := &Shm{}
	ret.FormatChan = make(chan ShmFormatEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Shm) CreatePool(fd uintptr, size int32) (*ShmPool, error) {
	ret := NewShmPool(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret), fd, size)
}

type BufferReleaseEvent struct {
}

type Buffer struct {
	BaseProxy
	ReleaseChan chan BufferReleaseEvent
}

func NewBuffer(c *Connection) *Buffer {
	ret := &Buffer{}
	ret.ReleaseChan = make(chan BufferReleaseEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Buffer) Destroy() error {
	return p.Connection().SendRequest(p, 0)
}

type DataOfferOfferEvent struct {
	MimeType string
}

type DataOffer struct {
	BaseProxy
	OfferChan chan DataOfferOfferEvent
}

func NewDataOffer(c *Connection) *DataOffer {
	ret := &DataOffer{}
	ret.OfferChan = make(chan DataOfferOfferEvent, 0)
	c.Register(ret)
	return ret
}

func (p *DataOffer) Accept(serial uint32, mimeType string) error {
	return p.Connection().SendRequest(p, 0, serial, mimeType)
}

func (p *DataOffer) Receive(mimeType string, fd uintptr) error {
	return p.Connection().SendRequest(p, 1, mimeType, fd)
}

func (p *DataOffer) Destroy() error {
	return p.Connection().SendRequest(p, 2)
}

type DataSourceTargetEvent struct {
	MimeType string
}

type DataSourceSendEvent struct {
	MimeType string
	Fd       uintptr
}

type DataSourceCancelledEvent struct {
}

type DataSource struct {
	BaseProxy
	TargetChan    chan DataSourceTargetEvent
	SendChan      chan DataSourceSendEvent
	CancelledChan chan DataSourceCancelledEvent
}

func NewDataSource(c *Connection) *DataSource {
	ret := &DataSource{}
	ret.TargetChan = make(chan DataSourceTargetEvent, 0)
	ret.SendChan = make(chan DataSourceSendEvent, 0)
	ret.CancelledChan = make(chan DataSourceCancelledEvent, 0)
	c.Register(ret)
	return ret
}

func (p *DataSource) Offer(mimeType string) error {
	return p.Connection().SendRequest(p, 0, mimeType)
}

func (p *DataSource) Destroy() error {
	return p.Connection().SendRequest(p, 1)
}

type DataDeviceDataOfferEvent struct {
	Id *DataOffer
}

type DataDeviceEnterEvent struct {
	Serial  uint32
	Surface *Surface
	X       float32
	Y       float32
	Id      *DataOffer
}

type DataDeviceLeaveEvent struct {
}

type DataDeviceMotionEvent struct {
	Time uint32
	X    float32
	Y    float32
}

type DataDeviceDropEvent struct {
}

type DataDeviceSelectionEvent struct {
	Id *DataOffer
}

type DataDevice struct {
	BaseProxy
	DataOfferChan chan DataDeviceDataOfferEvent
	EnterChan     chan DataDeviceEnterEvent
	LeaveChan     chan DataDeviceLeaveEvent
	MotionChan    chan DataDeviceMotionEvent
	DropChan      chan DataDeviceDropEvent
	SelectionChan chan DataDeviceSelectionEvent
}

func NewDataDevice(c *Connection) *DataDevice {
	ret := &DataDevice{}
	ret.DataOfferChan = make(chan DataDeviceDataOfferEvent, 0)
	ret.EnterChan = make(chan DataDeviceEnterEvent, 0)
	ret.LeaveChan = make(chan DataDeviceLeaveEvent, 0)
	ret.MotionChan = make(chan DataDeviceMotionEvent, 0)
	ret.DropChan = make(chan DataDeviceDropEvent, 0)
	ret.SelectionChan = make(chan DataDeviceSelectionEvent, 0)
	c.Register(ret)
	return ret
}

func (p *DataDevice) StartDrag(source *DataSource, origin *Surface, icon *Surface, serial uint32) error {
	return p.Connection().SendRequest(p, 0, source, origin, icon, serial)
}

func (p *DataDevice) SetSelection(source *DataSource, serial uint32) error {
	return p.Connection().SendRequest(p, 1, source, serial)
}

func (p *DataDevice) Release() error {
	return p.Connection().SendRequest(p, 2)
}

type DataDeviceManager struct {
	BaseProxy
}

func NewDataDeviceManager(c *Connection) *DataDeviceManager {
	ret := &DataDeviceManager{}
	c.Register(ret)
	return ret
}

func (p *DataDeviceManager) CreateDataSource() (*DataSource, error) {
	ret := NewDataSource(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret))
}

func (p *DataDeviceManager) GetDataDevice(seat *Seat) (*DataDevice, error) {
	ret := NewDataDevice(p.Connection())
	return ret, p.Connection().SendRequest(p, 1, Proxy(ret), seat)
}

type Shell struct {
	BaseProxy
}

func NewShell(c *Connection) *Shell {
	ret := &Shell{}
	c.Register(ret)
	return ret
}

func (p *Shell) GetShellSurface(surface *Surface) (*ShellSurface, error) {
	ret := NewShellSurface(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret), surface)
}

type ShellSurfacePingEvent struct {
	Serial uint32
}

type ShellSurfaceConfigureEvent struct {
	Edges  uint32
	Width  int32
	Height int32
}

type ShellSurfacePopupDoneEvent struct {
}

type ShellSurface struct {
	BaseProxy
	PingChan      chan ShellSurfacePingEvent
	ConfigureChan chan ShellSurfaceConfigureEvent
	PopupDoneChan chan ShellSurfacePopupDoneEvent
}

func NewShellSurface(c *Connection) *ShellSurface {
	ret := &ShellSurface{}
	ret.PingChan = make(chan ShellSurfacePingEvent, 0)
	ret.ConfigureChan = make(chan ShellSurfaceConfigureEvent, 0)
	ret.PopupDoneChan = make(chan ShellSurfacePopupDoneEvent, 0)
	c.Register(ret)
	return ret
}

func (p *ShellSurface) Pong(serial uint32) error {
	return p.Connection().SendRequest(p, 0, serial)
}

func (p *ShellSurface) Move(seat *Seat, serial uint32) error {
	return p.Connection().SendRequest(p, 1, seat, serial)
}

func (p *ShellSurface) Resize(seat *Seat, serial uint32, edges uint32) error {
	return p.Connection().SendRequest(p, 2, seat, serial, edges)
}

func (p *ShellSurface) SetToplevel() error {
	return p.Connection().SendRequest(p, 3)
}

func (p *ShellSurface) SetTransient(parent *Surface, x int32, y int32, flags uint32) error {
	return p.Connection().SendRequest(p, 4, parent, x, y, flags)
}

func (p *ShellSurface) SetFullscreen(method uint32, framerate uint32, output *Output) error {
	return p.Connection().SendRequest(p, 5, method, framerate, output)
}

func (p *ShellSurface) SetPopup(seat *Seat, serial uint32, parent *Surface, x int32, y int32, flags uint32) error {
	return p.Connection().SendRequest(p, 6, seat, serial, parent, x, y, flags)
}

func (p *ShellSurface) SetMaximized(output *Output) error {
	return p.Connection().SendRequest(p, 7, output)
}

func (p *ShellSurface) SetTitle(title string) error {
	return p.Connection().SendRequest(p, 8, title)
}

func (p *ShellSurface) SetClass(class string) error {
	return p.Connection().SendRequest(p, 9, class)
}

type SurfaceEnterEvent struct {
	Output *Output
}

type SurfaceLeaveEvent struct {
	Output *Output
}

type Surface struct {
	BaseProxy
	EnterChan chan SurfaceEnterEvent
	LeaveChan chan SurfaceLeaveEvent
}

func NewSurface(c *Connection) *Surface {
	ret := &Surface{}
	ret.EnterChan = make(chan SurfaceEnterEvent, 0)
	ret.LeaveChan = make(chan SurfaceLeaveEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Surface) Destroy() error {
	return p.Connection().SendRequest(p, 0)
}

func (p *Surface) Attach(buffer *Buffer, x int32, y int32) error {
	return p.Connection().SendRequest(p, 1, buffer, x, y)
}

func (p *Surface) Damage(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, 2, x, y, width, height)
}

func (p *Surface) Frame() (*Callback, error) {
	ret := NewCallback(p.Connection())
	return ret, p.Connection().SendRequest(p, 3, Proxy(ret))
}

func (p *Surface) SetOpaqueRegion(region *Region) error {
	return p.Connection().SendRequest(p, 4, region)
}

func (p *Surface) SetInputRegion(region *Region) error {
	return p.Connection().SendRequest(p, 5, region)
}

func (p *Surface) Commit() error {
	return p.Connection().SendRequest(p, 6)
}

func (p *Surface) SetBufferTransform(transform int32) error {
	return p.Connection().SendRequest(p, 7, transform)
}

func (p *Surface) SetBufferScale(scale int32) error {
	return p.Connection().SendRequest(p, 8, scale)
}

type SeatCapabilitiesEvent struct {
	Capabilities uint32
}

type SeatNameEvent struct {
	Name string
}

type Seat struct {
	BaseProxy
	CapabilitiesChan chan SeatCapabilitiesEvent
	NameChan         chan SeatNameEvent
}

func NewSeat(c *Connection) *Seat {
	ret := &Seat{}
	ret.CapabilitiesChan = make(chan SeatCapabilitiesEvent, 0)
	ret.NameChan = make(chan SeatNameEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Seat) GetPointer() (*Pointer, error) {
	ret := NewPointer(p.Connection())
	return ret, p.Connection().SendRequest(p, 0, Proxy(ret))
}

func (p *Seat) GetKeyboard() (*Keyboard, error) {
	ret := NewKeyboard(p.Connection())
	return ret, p.Connection().SendRequest(p, 1, Proxy(ret))
}

func (p *Seat) GetTouch() (*Touch, error) {
	ret := NewTouch(p.Connection())
	return ret, p.Connection().SendRequest(p, 2, Proxy(ret))
}

type PointerEnterEvent struct {
	Serial   uint32
	Surface  *Surface
	SurfaceX float32
	SurfaceY float32
}

type PointerLeaveEvent struct {
	Serial  uint32
	Surface *Surface
}

type PointerMotionEvent struct {
	Time     uint32
	SurfaceX float32
	SurfaceY float32
}

type PointerButtonEvent struct {
	Serial uint32
	Time   uint32
	Button uint32
	State  uint32
}

type PointerAxisEvent struct {
	Time  uint32
	Axis  uint32
	Value float32
}

type Pointer struct {
	BaseProxy
	EnterChan  chan PointerEnterEvent
	LeaveChan  chan PointerLeaveEvent
	MotionChan chan PointerMotionEvent
	ButtonChan chan PointerButtonEvent
	AxisChan   chan PointerAxisEvent
}

func NewPointer(c *Connection) *Pointer {
	ret := &Pointer{}
	ret.EnterChan = make(chan PointerEnterEvent, 0)
	ret.LeaveChan = make(chan PointerLeaveEvent, 0)
	ret.MotionChan = make(chan PointerMotionEvent, 0)
	ret.ButtonChan = make(chan PointerButtonEvent, 0)
	ret.AxisChan = make(chan PointerAxisEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Pointer) SetCursor(serial uint32, surface *Surface, hotspotX int32, hotspotY int32) error {
	return p.Connection().SendRequest(p, 0, serial, surface, hotspotX, hotspotY)
}

func (p *Pointer) Release() error {
	return p.Connection().SendRequest(p, 1)
}

type KeyboardKeymapEvent struct {
	Format uint32
	Fd     uintptr
	Size   uint32
}

type KeyboardEnterEvent struct {
	Serial  uint32
	Surface *Surface
	Keys    []int32
}

type KeyboardLeaveEvent struct {
	Serial  uint32
	Surface *Surface
}

type KeyboardKeyEvent struct {
	Serial uint32
	Time   uint32
	Key    uint32
	State  uint32
}

type KeyboardModifiersEvent struct {
	Serial        uint32
	ModsDepressed uint32
	ModsLatched   uint32
	ModsLocked    uint32
	Group         uint32
}

type KeyboardRepeatInfoEvent struct {
	Rate  int32
	Delay int32
}

type Keyboard struct {
	BaseProxy
	KeymapChan     chan KeyboardKeymapEvent
	EnterChan      chan KeyboardEnterEvent
	LeaveChan      chan KeyboardLeaveEvent
	KeyChan        chan KeyboardKeyEvent
	ModifiersChan  chan KeyboardModifiersEvent
	RepeatInfoChan chan KeyboardRepeatInfoEvent
}

func NewKeyboard(c *Connection) *Keyboard {
	ret := &Keyboard{}
	ret.KeymapChan = make(chan KeyboardKeymapEvent, 0)
	ret.EnterChan = make(chan KeyboardEnterEvent, 0)
	ret.LeaveChan = make(chan KeyboardLeaveEvent, 0)
	ret.KeyChan = make(chan KeyboardKeyEvent, 0)
	ret.ModifiersChan = make(chan KeyboardModifiersEvent, 0)
	ret.RepeatInfoChan = make(chan KeyboardRepeatInfoEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Keyboard) Release() error {
	return p.Connection().SendRequest(p, 0)
}

type TouchDownEvent struct {
	Serial  uint32
	Time    uint32
	Surface *Surface
	Id      int32
	X       float32
	Y       float32
}

type TouchUpEvent struct {
	Serial uint32
	Time   uint32
	Id     int32
}

type TouchMotionEvent struct {
	Time uint32
	Id   int32
	X    float32
	Y    float32
}

type TouchFrameEvent struct {
}

type TouchCancelEvent struct {
}

type Touch struct {
	BaseProxy
	DownChan   chan TouchDownEvent
	UpChan     chan TouchUpEvent
	MotionChan chan TouchMotionEvent
	FrameChan  chan TouchFrameEvent
	CancelChan chan TouchCancelEvent
}

func NewTouch(c *Connection) *Touch {
	ret := &Touch{}
	ret.DownChan = make(chan TouchDownEvent, 0)
	ret.UpChan = make(chan TouchUpEvent, 0)
	ret.MotionChan = make(chan TouchMotionEvent, 0)
	ret.FrameChan = make(chan TouchFrameEvent, 0)
	ret.CancelChan = make(chan TouchCancelEvent, 0)
	c.Register(ret)
	return ret
}

func (p *Touch) Release() error {
	return p.Connection().SendRequest(p, 0)
}

type OutputGeometryEvent struct {
	X              int32
	Y              int32
	PhysicalWidth  int32
	PhysicalHeight int32
	Subpixel       int32
	Make           string
	Model          string
	Transform      int32
}

type OutputModeEvent struct {
	Flags   uint32
	Width   int32
	Height  int32
	Refresh int32
}

type OutputDoneEvent struct {
}

type OutputScaleEvent struct {
	Factor int32
}

type Output struct {
	BaseProxy
	GeometryChan chan OutputGeometryEvent
	ModeChan     chan OutputModeEvent
	DoneChan     chan OutputDoneEvent
	ScaleChan    chan OutputScaleEvent
}

func NewOutput(c *Connection) *Output {
	ret := &Output{}
	ret.GeometryChan = make(chan OutputGeometryEvent, 0)
	ret.ModeChan = make(chan OutputModeEvent, 0)
	ret.DoneChan = make(chan OutputDoneEvent, 0)
	ret.ScaleChan = make(chan OutputScaleEvent, 0)
	c.Register(ret)
	return ret
}

type Region struct {
	BaseProxy
}

func NewRegion(c *Connection) *Region {
	ret := &Region{}
	c.Register(ret)
	return ret
}

func (p *Region) Destroy() error {
	return p.Connection().SendRequest(p, 0)
}

func (p *Region) Add(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, 1, x, y, width, height)
}

func (p *Region) Subtract(x int32, y int32, width int32, height int32) error {
	return p.Connection().SendRequest(p, 2, x, y, width, height)
}

type Subcompositor struct {
	BaseProxy
}

func NewSubcompositor(c *Connection) *Subcompositor {
	ret := &Subcompositor{}
	c.Register(ret)
	return ret
}

func (p *Subcompositor) Destroy() error {
	return p.Connection().SendRequest(p, 0)
}

func (p *Subcompositor) GetSubsurface(surface *Surface, parent *Surface) (*Subsurface, error) {
	ret := NewSubsurface(p.Connection())
	return ret, p.Connection().SendRequest(p, 1, Proxy(ret), surface, parent)
}

type Subsurface struct {
	BaseProxy
}

func NewSubsurface(c *Connection) *Subsurface {
	ret := &Subsurface{}
	c.Register(ret)
	return ret
}

func (p *Subsurface) Destroy() error {
	return p.Connection().SendRequest(p, 0)
}

func (p *Subsurface) SetPosition(x int32, y int32) error {
	return p.Connection().SendRequest(p, 1, x, y)
}

func (p *Subsurface) PlaceAbove(sibling *Surface) error {
	return p.Connection().SendRequest(p, 2, sibling)
}

func (p *Subsurface) PlaceBelow(sibling *Surface) error {
	return p.Connection().SendRequest(p, 3, sibling)
}

func (p *Subsurface) SetSync() error {
	return p.Connection().SendRequest(p, 4)
}

func (p *Subsurface) SetDesync() error {
	return p.Connection().SendRequest(p, 5)
}
